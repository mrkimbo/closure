<HTML>
<HEAD>
<script language="javascript" type="text/javascript">
	// Initial screen setup //
	var dims = { w:400,h:200 };
	
	var l=(screen.availWidth/2 - dims.w/2);
	var t=(screen.availHeight/2 - dims.h/2);
	self.moveTo(l,t);
	self.resizeTo(dims.w,dims.h);
</script>
<script language="javascript" type="text/javascript">

  var fileMatch = /([^\\]*).json$/i;
	var emptyMsg = 'None selected...';
	var fileSelect,configList, selectBtn, submitBtn;

	function init()
	{
		fileSelect = document.getElementById('browser');
		configList = document.getElementById('configList');
		submitBtn = document.getElementById('submit');
		selectBtn = document.getElementById('select');

		// Set up config history //
		initHistory();

		// Key listener //
		document.onkeypress = function()
		{
			if(event.keyCode==27)
			{
				window.close();
				return;
			}
			if(event.keyCode==13)
			{
				//submitHandler();
				//return;
			}
		}
	
		// Check fo existing process //
		if(processExists('java.exe'))
		{
			alert( '\'java.exe\' process already running!!' );
			close();
			return;
		}
	};
	
	function processExists(name)
	{
		// Check for existing process /
		var e = new Enumerator (GetObject('winmgmts:').InstancesOf('Win32_process'));
		
		for (; !e.atEnd(); e.moveNext())
		{
		  if (e.item().Name.toLowerCase() == name.toLowerCase()) return true;
		}
		return false;
	}

	function initHistory()
	{
	  //eraseCookie('config');

    var val = readCookie('config');
    if(!val || !val.length)
    {
      configList.options[configList.options.length] = new Option(emptyMsg, '');
      submitBtn.disabled = true;
      selectBtn.focus();
      return;
    }

    var opts = val.split(',');
    var parts;
    for( var i=0;i<opts.length;i++ )
    {
      configList.options[configList.options.length] = new Option(opts[i].match(fileMatch)[1],opts[i]);
    }
    submitBtn.disabled = false;
    submitBtn.focus();
	}

	function getConfigList()
	{
	  var a = [],f;
	  for( var i=0;i<configList.options.length;i++ )
	  {
	    if(!configList.options[i].value) continue;
	    f = (configList.options[i].selected)?'unshift':'push';
	    a[f](configList.options[i].value);
	  }
	  return a;
	}

	function getConfigIndex(item)
	{
	  for( var i=0;i<configList.options.length;i++ )
	  {
	    if(configList.options[i].value == item) return i;
	  }
	  return -1;
	}

	function saveConfigList()
	{
	  //alert(getConfigList().join(','));
	  createCookie('config',getConfigList().join(','),90);
	}

	function createCookie(name,value,days)
	{
		if (days) {
			var date = new Date();
			date.setTime(date.getTime()+(days*24*60*60*1000));
			var expires = "; expires="+date.toGMTString();
		}
		else var expires = "";
		document.cookie = name+"="+value+expires+"; path=/";
	}

	function readCookie(name)
	{
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i=0;i < ca.length;i++) {
			var c = ca[i];
			while (c.charAt(0)==' ') c = c.substring(1,c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
		}
		return null;
	}

	function eraseCookie(name)
	{
		createCookie(name,"",-1);
	}
	
	function chk(file)
	{
		if(!file)
		{
			alert('No config selected');
			return false;
		}
		if(!/\.json$/.test(file))
		{
			alert('invalid config - not a json file');
			return false;
		}
		return true;
	}
	
	function submitHandler()
	{
	  var file = configList.options[configList.selectedIndex].value;
		if(chk(file)) startPlovr(file);
	}
	
	function selectHandler()
	{
		fileSelect.click();
	}
	
	function handleFileSelect(e)
	{
		var file = fileSelect.value;
		
		if(!chk(file))
		{
			submitBtn.disabled = true;
			return;
		}

		// Add new history option //
		var idx = getConfigIndex(file)
		if(idx == -1)
		{
      if(!configList.options[0].value) configList.options.length = 0;
      configList.options[configList.options.length] = new Option(file.match(fileMatch)[1],file);
      idx = configList.options.length-1;
    }
    configList.selectedIndex = idx;

		// Save history cookie //
		saveConfigList();

		// update ui //
		submitBtn.disabled = false;
		submitBtn.focus();
	}
	
	function startPlovr(config)
	{
	  saveConfigList();

		var fso	= new ActiveXObject( 'Scripting.FileSystemObject' );
		var shell = new ActiveXObject( 'Wscript.Shell' );

		// ---- START Plovr ---- //
		var currentDir  = fso.GetAbsolutePathName( '.' );
		var jarPath     = currentDir + '/compiler/plovr.jar';
		var jsSnapshot  = currentDir + '/compiler/closure-template-plugin-0.0.1-SNAPSHOT.jar';
		var cssSnapshot = currentDir + '/compiler/CustomFunctions.jar';
		var command     = 'cmd.exe /k java -classpath ' + jarPath + ';' +
		                  jsSnapshot + ';' + cssSnapshot + ' ' +
		                  'org.plovr.cli.Main serve ' + config;

		//alert(command);
		shell.run( command,7 );
		close();
	}
	
</script>
<TITLE>Plovr Startup - Options</TITLE>
<HTA:APPLICATION ID="Plovr-Startup"
    BORDER="thin"
    INNERBORDER="no"
    SCROLL="no" 
    SCROLLFLAT="no"
    CAPTION="yes"    
    MAXIMIZEBUTTON="no"
    SHOWINTASKBAR="yes"
    SINGLEINSTANCE="yes"
    SYSMENU="yes"
    NAVIGABLE="yes"
    ICON="StartPlovr.ico"
    WINDOWSTATE="normal">
<STYLE> 
	html { font-size: 62.5%; }
	body {
		margin:0;
		font-family: Tahoma, Geneva, sans-serif;
		font-size: 14px;
		font-size: 1.4rem;
	} 
	#wrapper { 
		width:100%;
		height:100%;
		padding:20px;
	}
	#config_row
	{
		border: 0px solid red;
		vertical-align:middle;
	}
	#last_config { margin-bottom: 20px; };
	#config_row { width:100%; background:white; }
	#config_row label { float:left; padding-right:10px; }
	#config_row select { width: 280px; color: #AAA; font-weight: bold; }
	
	#buttons { 
		width: 300px; 
		text-align:center; 
		position:relative;
		float:right;
		right:-8px;
		top: 20px;
		background:white;
	}
	button { 
		height: 40px;
		width: 130px;
		font-family: Tahoma, Geneva, sans-serif; 
		margin-right:14px;
	}
	input { visibility:hidden; }
	
</STYLE>
</HEAD>
<BODY onload="init();">

	<div id="wrapper">
	
		<input id="browser" type="file" onchange="handleFileSelect()"/>
		
		<div id="config_row">
			<label>Config:</label>
			<select id="configList"></select>
		</div>
		
		<div id="buttons">
			<button id="select" onclick="selectHandler()">Select Config</button>
			<button id="submit" disabled onclick="submitHandler()">Start Plovr</button>
		</div>
		
	</div>

</BODY>
</HTML>